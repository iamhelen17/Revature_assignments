package synch_eg;

public class Printer {

	public synchronized static void printPages(Pages page) {
		System.out.print(page.getPage1());
		try {
			Thread.sleep(1000);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		System.out.println("  "+page.getPage2());
	}
}

//TASK1) Recreate the same and get good understanding of the thread flow using Runnable and Thread class.
//TASK2) Explore on inter-thread communication methods like wait(), notify() , notifyAll()
//TASK3) Go over Producer-Consumer problem and how they solve it using inter-thread communication.
/*
The Producer-Consumer problem describes two processes, the producer and the consumer, who share a common, fixed-size buffer used as a queue. 
The producer’s job is to generate a piece of data, put it into the buffer and start again.
At the same time, the consumer is consuming the data (i.e., removing it from the buffer) one piece at a time. 
The problem is to make sure that the producer won’t try to add data into the buffer if it’s full and that the consumer won’t try to remove data from an empty buffer.

Solution: Add the keyword synchronized  to put a lock on the data  while you are using it.
*/